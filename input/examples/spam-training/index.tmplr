Title: Training Spam Messages
----

<p>SPAM is pretty much a matter of fact for email users these days, so being able to train messages as junk is useful.</p>
<p>Many users deploy custom solutions, be they <code>spamassassin</code>, <code>crm114</code>, or something different.</p>
<p>In general though there are two ways to train a mis-filed message as SPAM:</p>
<ul>
<li><a href="#piping">Pipe a message to a (shell) command</a>.</li>
<li><a href="#saving">Save a message to a specific folder</a>.</li>
</ul>

<h3 name="piping">Training via piping</h3>
<blockquote>
<p>Here we execute the command "<code>~/bin/train-spam</code>" with the path to the message we're viewing, or under the point.</p>
<pre>
function train_spam()
   local msg = Message.at_point()
   if ( msg == nil ) then
      Panel:append( "Failed to find message to train" )
      return
   end

   -- Get the path & execute the command
   local path = msg:path()
   os.execute("~/bin/train-spam " .. path )

   -- Delete the original now.
   Message.delete()
end

keymap['index']['X']   = "train_spam()"
keymap['message']['X'] = "train_spam()"
</pre>
</blockquote>

<h3 name="saving">Training via message-saving</h3>
<blockquote>
<p>Here we take the current message, or the one under the mark in index-mode, and save it to <code>~/Maildir/train-spam/</code>.</p>
<pre>
function train_spam()
   local msg = Message.at_point()
   if ( msg == nil ) then
      Panel:append( "Failed to find message to train" )
      return
   end

   -- Get folder to save to
   local folder = Maildir.new( os.getenv("HOME" ) .. "/Maildir/train-spam/" )
   folder:save_message(msg)

   -- Delete the original now.
   Message.delete()
end

keymap['index']['X']   = "train_spam()"
keymap['message']['X'] = "train_spam()"
</pre>
</blockquote>
